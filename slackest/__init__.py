# Copyright 2019 Cox Automotive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
import json
import time

from slackest.utils import get_item_id_by_name


from .constants import *

__version__ = '0.13.3'
__all__ = ['SlackestError', 'Response', 'BaseAPI', 'API', 'Auth', 'Users',
           'Groups', 'Conversation', 'Channels', 'Chat', 'IM',
           'IncomingWebhook', 'Search', 'Files', 'Stars', 'Emoji', 'Presence',
           'RTM', 'Team', 'Reactions', 'Pins', 'UserGroups', 'UserGroupsUsers',
           'MPIM', 'OAuth', 'DND', 'Bots', 'FilesComments', 'Reminders',
           'TeamProfile', 'UsersProfile', 'IDPGroups', 'Apps',
           'AppsPermissions', 'Slackest', 'Dialog']


from .slackest_error import SlackestError

from .response import Response

from .base_api import BaseAPI

from .api import API

from .auth import Auth

from .dialog import Dialog

from .users_profile import UsersProfile

from .users_admin import UsersAdmin

from .users import Users

from .groups import Groups

from .channels import Channels

from .conversation import Conversation

from .chat import Chat

from .im import IM

from .mpim import MPIM

from .search import Search

from .files_comments import FilesComments

from .files import Files

from .stars import Stars

from .emoji import Emoji

from .presence import Presence

from .rtm import RTM

from .team_profile import TeamProfile

class Team(BaseAPI):
    """Follows the Slack Team API. See https://api.slack.com/methods"""

    def __init__(self, *args, **kwargs):
        super(Team, self).__init__(*args, **kwargs)
        self._profile = TeamProfile(*args, **kwargs)

    @property
    def profile(self):
        return self._profile

    def info(self):
        """
        Gets information about the current team

        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.get('team.info')

    def access_logs(self, count=None, page=None, before=None):
        """
        Gets the access log for the current team

        :param count: Number of items to return in the page
        :type count: int
        :param page: The page number of results
        :type page: int
        :param before: End time range of logs to include
        :type before: int
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.get('team.accessLogs',
                        params={
                            'count': count,
                            'page': page,
                            'before': before
                        })

    def integration_logs(self, service_id=None, app_id=None, user=None,
                         change_type=None, count=None, page=None):
        """
        Gets the integration logs for the current team

        :param service_id: Filter logs to this service
        :type service_id: str
        :param app_id: Filter logs to this slack app
        :type app_id: str
        :param user: Filter logs generated by this user
        :type user: str
        :param change_type: Filter logs to this change type
        :type change_type: str
        :param count: Number of items to return per page
        :type count: int
        :param page: The page number of results
        :type page: int
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.get('team.integrationLogs',
                        params={
                            'service_id': service_id,
                            'app_id': app_id,
                            'user': user,
                            'change_type': change_type,
                            'count': count,
                            'page': page,
                        })

    def billable_info(self, user=None):
        """
        Gets billable users information

        :param user:
        :type user:
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.get('team.billableInfo', params={'user': user})


class Reactions(BaseAPI):
    """Follows the Slack Reactions API. See https://api.slack.com/methods"""

    def add(self, name, file_=None, file_comment=None, channel=None,
            timestamp=None):
        """
        Adds a reaction to an item

        :param name: Reaction name
        :type name: str
        :param file_: File to add reaction to
        :type file_: str
        :param file_comment: File comment to add reaction to
        :type file_comment: str
        :param channel: Channel where the message to add reaction
        :type channel: str
        :param timestamp: Timestamp of the message
        :type timestamp: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        # One of file, file_comment, or the combination of channel and timestamp
        # must be specified
        assert (file_ or file_comment) or (channel and timestamp)

        return self.post('reactions.add',
                         data={
                             'name': name,
                             'file': file_,
                             'file_comment': file_comment,
                             'channel': channel,
                             'timestamp': timestamp,
                         })

    def get(self, file_=None, file_comment=None, channel=None, timestamp=None,
            full=None):
        """
        Gets reactions for an item

        :param file_: File to get reaction
        :type file_: str
        :param file_comment: File comment to get reaction
        :type file_comment: str
        :param channel: Channel where the message to get reaction
        :type channel: str
        :param timestamp: Timestamp of the message
        :type timestamp: str
        :param full: Return complete reaction list
        :type full: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return super(Reactions, self).get('reactions.get',
                                          params={
                                              'file': file_,
                                              'file_comment': file_comment,
                                              'channel': channel,
                                              'timestamp': timestamp,
                                              'full': full,
                                          })

    def list(self, user=None, full=None, count=None, page=None):
        """
        List reactions made by a user

        :param user: User ID to list reactions
        :type user: str
        :param full: Return complete reaction list
        :type full: str
        :param count: Number of items to return on the page
        :type count: int
        :param page: Page number of results
        :type page: int
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return super(Reactions, self).get('reactions.list',
                                          params={
                                              'user': user,
                                              'full': full,
                                              'count': count,
                                              'page': page,
                                          })

    def remove(self, name, file_=None, file_comment=None, channel=None,
               timestamp=None):
        """
        Removes a reaction from an item

        :param name: Reaction name
        :type name: str
        :param file_: File to remove reaction
        :type file_: str
        :param file_comment: File comment to remove reaction
        :type file_comment: str
        :param channel: Channel where the message to remove reaction
        :type channel: str
        :param timestamp: Timestamp of the message
        :type timestamp: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        # One of file, file_comment, or the combination of channel and timestamp
        # must be specified
        assert (file_ or file_comment) or (channel and timestamp)

        return self.post('reactions.remove',
                         data={
                             'name': name,
                             'file': file_,
                             'file_comment': file_comment,
                             'channel': channel,
                             'timestamp': timestamp,
                         })


class Pins(BaseAPI):
    """Follows the Slack Pins API. See https://api.slack.com/methods"""

    def add(self, channel, file_=None, file_comment=None, timestamp=None):
        """
        Pins an item to a channel

        :param channel: The channel ID
        :type channel: str
        :param file_: The File ID to add
        :type file_: str
        :param file_comment: The file comment ID to add
        :type file_comment: str
        :param timestamp: Timestamp of the message to add
        :type timestamp: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        # One of file, file_comment, or timestamp must also be specified
        assert file_ or file_comment or timestamp

        return self.post('pins.add',
                         data={
                             'channel': channel,
                             'file': file_,
                             'file_comment': file_comment,
                             'timestamp': timestamp,
                         })

    def remove(self, channel, file_=None, file_comment=None, timestamp=None):
        """
        Un-pins an item from a channel

        :param channel: The channel ID
        :type channel: str
        :param file_: The File ID to remove
        :type file_: str
        :param file_comment: The file comment ID to remove
        :type file_comment: str
        :param timestamp: Timestamp of the message to remove
        :type timestamp: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        # One of file, file_comment, or timestamp must also be specified
        assert file_ or file_comment or timestamp

        return self.post('pins.remove',
                         data={
                             'channel': channel,
                             'file': file_,
                             'file_comment': file_comment,
                             'timestamp': timestamp,
                         })

    def list(self, channel):
        """
        Lists items pinned to a channel

        :param channel: The channel ID
        :type channel: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.get('pins.list', params={'channel': channel})


class UserGroupsUsers(BaseAPI):
    """Follows the Slack UserGroupUsers API. See https://api.slack.com/methods"""

    def list(self, usergroup, include_disabled=False):
        """
        Lists all users in a usergroup

        :param usergroup: The usergroup ID
        :type usergroup: str
        :param include_disabled: Include disabled users
        :type include_disabled: bool
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        if isinstance(include_disabled, bool):
            include_disabled = str(include_disabled).lower()

        return self.get('usergroups.users.list', params={
            'usergroup': usergroup,
            'include_disabled': include_disabled,
        })

    def update(self, usergroup, users, include_count=False):
        """
        Updates the list of users for a usergroup

        :param usergroup: The usergroup ID
        :type usergroup: str
        :param users: CSV of user IDs to add
        :type users: list[str]
        :param include_count: Include a count of users
        :type include_count: bool
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        if isinstance(users, (tuple, list)):
            users = ','.join(users)

        return self.post('usergroups.users.update', data={
            'usergroup': usergroup,
            'users': users,
            'include_count': str(include_count).lower(),
        })


class UserGroups(BaseAPI):
    """Follows the Slack UserGroups API. See https://api.slack.com/methods"""

    def __init__(self, *args, **kwargs):
        super(UserGroups, self).__init__(*args, **kwargs)
        self._users = UserGroupsUsers(*args, **kwargs)

    @property
    def users(self):
        return self._users

    def list(self, include_disabled=False, include_count=False, include_users=False):
        """
        Lists all of the usergroups

        :param include_disabled: Include disabled usergroups
        :type include_disabled: bool
        :param include_count: Include the number of users in the usergroup
        :type include_count: bool
        :param include_users: Include the list of users of the usergroup
        :type include_users: bool
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.get('usergroups.list', params={
            'include_disabled': str(include_disabled).lower(),
            'include_count': str(include_count).lower(),
            'include_users': str(include_users).lower(),
        })

    def create(self, name, handle=None, description=None, channels=None,
               include_count=False):
        """
        Creates a new usergroup

        :param name: A name for the usergroup
        :type name: str
        :param handle: The mention handle
        :type handle: str
        :param description: Description of the usergroup
        :type description: str
        :param channels: CSV of channel IDs for the usergroup
        :type channels: list[str]
        :param include_count: Include the number of users in the usergroup
        :type include_count: bool
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        if isinstance(channels, (tuple, list)):
            channels = ','.join(channels)

        return self.post('usergroups.create', data={
            'name': name,
            'handle': handle,
            'description': description,
            'channels': channels,
            'include_count': str(include_count).lower(),
        })

    def update(self, usergroup, name=None, handle=None, description=None,
               channels=None, include_count=True):
        """
        Update an existing usergroup

        :param usergroup: The encoded ID of the usergroup
        :type usergroup: str
        :param name: A name for the usergroup
        :type name: str
        :param handle: The mention handle
        :type handle: str
        :param description: Description of the usergroup
        :type description: str
        :param channels: CSV of channel IDs for the usergroup
        :type channels: list[str]
        :param include_count: Include the number of users in the usergroup
        :type include_count: bool
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        if isinstance(channels, (tuple, list)):
            channels = ','.join(channels)

        return self.post('usergroups.update', data={
            'usergroup': usergroup,
            'name': name,
            'handle': handle,
            'description': description,
            'channels': channels,
            'include_count': str(include_count).lower(),
        })

    def disable(self, usergroup, include_count=True):
        """
        Disable a UserGroup

        :param usergroup: The encoded ID of the usergroup
        :type usergroup: str
        :param include_count: Include the number of users
        :type include_count: bool
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.post('usergroups.disable', data={
            'usergroup': usergroup,
            'include_count': str(include_count).lower(),
        })

    def enable(self, usergroup, include_count=True):
        """
        Enable a UserGroup

        :param usergroup: The encoded ID of the usergroup
        :type usergroup: str
        :param include_count: Include the number of users
        :type include_count: bool
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.post('usergroups.enable', data={
            'usergroup': usergroup,
            'include_count': str(include_count).lower(),
        })


class DND(BaseAPI):
    """Follows the Slack DND API. See https://api.slack.com/methods"""

    def team_info(self, users=[]):
        """
        Provides info about DND for a list of users on a Slack team

        :param users: The list of user ids
        :type users: list[str]
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        if isinstance(users, (tuple, list)):
            users = ','.join(users)

        return self.get('dnd.teamInfo', params={'users': users})

    def set_snooze(self, num_minutes):
        """
        The number of minutes to snooze

        :param num_minutes: The number of minutes to snooze
        :type num_minutes: int
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.post('dnd.setSnooze', data={'num_minutes': num_minutes})

    def info(self, user=None):
        """
        Retrieves the current user's DND status

        :param user: User ID to fetch status
        :type user: str
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.get('dnd.info', params={'user': user})

    def end_dnd(self):
        """
        Ends the current user's DND session

        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.post('dnd.endDnd')

    def end_snooze(self):
        """
        End's the current user's snooze

        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.post('dnd.endSnooze')


class Reminders(BaseAPI):
    """Follows the Slack Reminders API. See https://api.slack.com/methods"""

    def add(self, text, reminder_time, user=None):
        """
        Creates a reminder

        :param text: Content of the reminder
        :type text: str
        :param reminder_time: Unix timestamp to show the reminder
        :type reminder_time: int
        :param user: User ID attached to the reminder
        :type user: str
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.post('reminders.add',
                         data={'text': text, 'time': reminder_time, 'user': user})

    def complete(self, reminder):
        """
        Mark the reminder as completed

        :param reminder: The reminder ID
        :type reminder: str
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.post('reminders.complete', data={'reminder': reminder})

    def delete(self, reminder):
        """
        Deletes a reminder

        :param reminder: The reminder ID
        :type reminder: str
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.post('reminders.delete', data={'reminder': reminder})

    def info(self, reminder):
        """
        Returns information about a reminder

        :param reminder: The reminder ID
        :type reminder: str
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.get('reminders.info', params={'reminder': reminder})

    def list(self):
        """
        Returns a list of reminders created by or for a given user

        :param :
        :type :
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.get('reminders.list')


class Bots(BaseAPI):
    """Follows the Slack Bots API. See https://api.slack.com/methods"""

    def info(self, bot=None):
        """
        Gets information about a bot user

        :param bot: Bot user ID
        :type bot: str
        :return: A response object to run the request.
        :rtype: :class:`Response <Response>` object
        """
        return self.get('bots.info', params={'bot': bot})


class IDPGroups(BaseAPI):
    """Follows the Slack IDPGroups API. See https://api.slack.com/methods"""

    def list(self, include_users=False):
        """
        DEPRECATED? This class will be removed in the next major release.

        :param :
        :type :
        :return :
        :rtype:
        """
        return self.get('idpgroups.list',
                        params={'include_users': int(include_users)})


class OAuth(BaseAPI):
    """Follows the Slack OAuth API. See https://api.slack.com/methods"""

    def access(self, client_id, client_secret, code, redirect_uri=None):
        """
        Exchanges a temporary OAuth verifier code for an access token

        :param client_id: Issued when you created your application
        :type client_id: str
        :param client_secret: Issued when you created your application.
        :type client_secret: str
        :param code: Code para returned via the callback
        :type code: str
        :param redirect_uri: URL to land on
        :type redirect_uri: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.post('oauth.access',
                         data={
                             'client_id': client_id,
                             'client_secret': client_secret,
                             'code': code,
                             'redirect_uri': redirect_uri
                         })

    def token(self, client_id, client_secret, code, redirect_uri=None,
              single_channel=None):
        """
        Exchanges a temporary OAuth verifier code for a workspace token

        :param client_id: Issued when you created your application
        :type client_id: str
        :param client_secret: Issued when you created your application.
        :type client_secret: str
        :param code: Code para returned via the callback
        :type code: str
        :param redirect_uri: URL to land on
        :type redirect_uri: str
        :param single_channel: Request the user to add the app only to a single channel
        :type single_channel: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.post('oauth.token',
                         data={
                             'client_id': client_id,
                             'client_secret': client_secret,
                             'code': code,
                             'redirect_uri': redirect_uri,
                             'single_channel': single_channel,
                         })


class AppsPermissions(BaseAPI):
    """Follows the Slack AppsPermissions API. See https://api.slack.com/methods"""

    def info(self):
        """
        All current permissions this app has (deprecated)

        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.get('apps.permissions.info')

    def request(self, scopes, trigger_id):
        """
        All current permissions this app has

        :param scopes: A comma separated list of scopes to request for
        :type scopes: list[str]
        :param trigger_id: Token used to trigger the permissions API
        :type trigger_id: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.post('apps.permissions.request',
                         data={
                             scopes: ','.join(scopes),
                             trigger_id: trigger_id,
                         })


class Apps(BaseAPI):
    """Follows the Slack Apps API. See https://api.slack.com/methods"""

    def __init__(self, *args, **kwargs):
        super(Apps, self).__init__(*args, **kwargs)
        self._permissions = AppsPermissions(*args, **kwargs)

    @property
    def permissions(self):
        return self._permissions


from .incoming_webhook import IncomingWebhook


class Slackest(object):
    """The main Slackest work horse. Surfaces some convenience methods but mostly
    interfaces with the auxilary classes."""

    oauth = OAuth(timeout=DEFAULT_TIMEOUT)

    def __init__(self, token, incoming_webhook_url=None,
                 timeout=DEFAULT_TIMEOUT, http_proxy=None, https_proxy=None,
                 session=None, rate_limit_retries=DEFAULT_RETRIES):

        proxies = self.__create_proxies(http_proxy, https_proxy)
        api_args = {
            'token': token,
            'timeout': timeout,
            'proxies': proxies,
            'session': session,
            'rate_limit_retries': rate_limit_retries,
        }
        self.im = IM(**api_args)
        self.api = API(**api_args)
        self.dnd = DND(**api_args)
        self.rtm = RTM(**api_args)
        self.apps = Apps(**api_args)
        self.auth = Auth(**api_args)
        self.bots = Bots(**api_args)
        self.conversation = Conversation(**api_args)
        self.chat = Chat(**api_args)
        self.dialog = Dialog(**api_args)
        self.team = Team(**api_args)
        self.pins = Pins(**api_args)
        self.mpim = MPIM(**api_args)
        self.users = Users(**api_args)
        self.files = Files(**api_args)
        self.stars = Stars(**api_args)
        self.emoji = Emoji(**api_args)
        self.search = Search(**api_args)
        self.groups = Groups(**api_args)
        self.channels = Channels(**api_args)
        self.presence = Presence(**api_args)
        self.reminders = Reminders(**api_args)
        self.reactions = Reactions(**api_args)
        self.idpgroups = IDPGroups(**api_args)
        self.usergroups = UserGroups(**api_args)
        self.incomingwebhook = IncomingWebhook(url=incoming_webhook_url,
                                               timeout=timeout, proxies=proxies)

    def __create_proxies(self, http_proxy=None, https_proxy=None):
        """
        Creates the appropriate proxy type

        :param http_proxy: An HTTP proxy
        :type http_proxy: bool
        :param https_proxy: An HTTPS proxy
        :type https_proxy: bool
        :return: A dictionary of proxy configurations
        :rtype: dict
        """
        proxies = dict()
        if http_proxy:
            proxies['http'] = http_proxy
        if https_proxy:
            proxies['https'] = https_proxy
        return proxies

    def create_channel(self, name, is_private=True, users=[]):
        """
        Creates a channel

        :param name: The channel name
        :type name: str
        :param is_private: Determines if channel is private (like a group)
        :type is_private: bool
        :param user_ids: A list of User IDs to add to the channel
        :type user_ids: list[str]
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.conversation.create(name, is_private, users)

    def get_channels(self, exclude_archive, types):
        """
        Lists all channels

        :param exclude_archived: Exclude archived channels
        :type exclude_archived: bool
        :param types: The type of channel to return, can be one of public_channel, private_channel
        :type types: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.conversation.list_all(exclude_archived=exclude_archive, types=types)

    def list_all_users(self):
        """
        Lists all users

        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.users.list_all(include_locale=True)

    def kick_user(self, channel, user):
        """
        Removes a user from a channel

        :param channel: The channel ID
        :type channel: str
        :param user: The user ID
        :type user: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.conversation.kick(channel, user)

    def history_all(self, channel):
        """
        Fetches all history of messages and events from a channel

        :param channel: The channel ID
        :type channel: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.conversation.history_all(channel)

    def post_message_to_channel(self, channel, message):
        """
        Posts a message to a channel

        :param channel: The channel ID
        :type channel: str
        :param message: The message text
        :type message: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.chat.post_message(channel, text=message, link_names=True)

    def post_thread_to_message(self, channel, message, thread_ts):
        """

        :param channel: The channel ID
        :type channel: str
        :param message: The message text
        :type message: str
        :param thread_ts: The parent thread timestamp identifier
        :type thread_ts: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.chat.post_message(channel, text=message, thread_ts=thread_ts, link_names=True)

    def add_member_to_channel(self, channel, member):
        """
        Invites a user to a channel

        :param channel: The channel ID
        :type channel: str
        :param user: A user ID to invite to a channel
        :type user: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.conversation.invite(channel, member)

    def get_channel_info(self, channel):
        """
        Gets information about a channel.

        :param channel: The channel ID
        :type channel: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.channels.info(channel)

    def get_replies(self, channel, time_stamp):
        """
        Fetches all replies in a thread of messages

        :param channel: The channel ID
        :type channel: str
        :param time_stamp: Unique identifier of a thread's parent message
        :type time_stamp: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.conversation.replies_all(channel, time_stamp)

    def set_purpose(self, channel, purpose):
        """
        Sets the purpose a channel

        :param channel: The channel ID
        :type channel: str
        :param purpose: The purpose to set
        :type purpose: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.conversation.setPurpose(channel, purpose)

    def set_topic(self, channel, topic):
        """
        Sets the topic a channel

        :param channel: The channel ID
        :type channel: str
        :param topic: The topic to set
        :type topic: str
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.conversation.setTopic(channel, topic)

    def upload_file(self, filename, channels):
        """
        Uploads a file to a channel

        :param filename: The filename to upload
        :type filename: str
        :param channels: Channel IDs to upload to
        :type channels: list[str]
        :return: A response object to run the API request.
        :rtype: :class:`Response <Response>` object
        """
        return self.files.upload(filename, channels=channels)
